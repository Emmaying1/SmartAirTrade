document.addEventListener('DOMContentLoaded', () => {
    // --- STATE MANAGEMENT ---
    const state = {
        isAuthenticated: true,
        activeView: 'dashboard',
        viewContext: {},
        theme: localStorage.getItem('smartairtrade-theme') || 'dark',
        pairs: [],
        assets: [],
        totalBalance: 0,
        investments: [],
        modals: {
            deposit: false,
            transfer: false,
            exchange: false,
            chat: false,
            contactSupport: false,
            login: false,
            resetPassword: false,
            changePassword: false,
            setTxPassword: false,
            verifyPhone: false,
            tradeExecution: false,
            tradeDetails: null,
            aboutUs: false,
            help: false,
        },
        toastMessage: '',
    };

    // --- DOM REFERENCES ---
    const appHeader = document.getElementById('app-header');
    const appView = document.getElementById('app-view');
    const bottomNav = document.getElementById('bottom-nav');
    const modalContainer = document.getElementById('modal-container');
    const toastContainer = document.getElementById('toast-container');
    const htmlEl = document.documentElement;

    // --- ICONS (SVG Strings) ---
    const ICONS = {
        logo: `<svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 15h12l-12 -12h12l-6 15l-6 -15h6" /></svg>`,
        dashboard: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><rect x="4" y="4" width="6" height="6" rx="1" /><rect x="14" y="4" width="6" height="6" rx="1" /><rect x="4" y="14" width="6" height="6" rx="1" /><rect x="14" y="14" width="6" height="6" rx="1" /></svg>`,
        market: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="4" y1="20" x2="4" y2="10" /><line x1="9" y1="20" x2="9" y2="4" /><line x1="14" y1="20" x2="14" y2="14" /><line x1="19" y1="20" x2="19" y2="8" /></svg>`,
        trade: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><line x1="12" y1="12" x2="12" y2="21" /><path d="M16 12a4 4 0 0 0 -4 -4" /><path d="M8 12a4 4 0 1 0 8 0" /></svg>`,
        options: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M8 9l3 3l-3 3" /><path d="M13 15h3" /><rect x="3" y="4" width="18" height="16" rx="2" /></svg>`,
        ai: `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 12h1" /><path d="M12 4v1" /><path d="M19 12h1" /><path d="M12 20v-1" /><path d="M17.657 6.343l.707 -.707" /><path d="M6.343 6.343l-.707 -.707" /><path d="M17.657 17.657l.707 .707" /><path d="M6.343 17.657l-.707 .707" /><circle cx="12" cy="12" r="2" /></svg>`,
        user: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><circle cx="12" cy="7" r="4" /><path d="M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2" /></svg>`,
        settings: `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" /><circle cx="12" cy="12" r="3" /></svg>`,
        eye: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>`,
        deposit: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 00-2.25 2.25v9a2.25 2.25 0 002.25 2.25h9A2.25 2.25 0 0018.75 19.5v-9a2.25 2.25 0 00-2.25-2.25H15M9 12l3 3m0 0l3-3m-3 3V2.25" /></svg>`,
        withdraw: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M9 8.25H7.5a2.25 2.25 0 00-2.25 2.25v9a2.25 2.25 0 002.25 2.25h9A2.25 2.25 0 0018.75 19.5v-9a2.25 2.25 0 00-2.25-2.25H15m0-3l-3-3m0 0l-3 3m3-3v12" /></svg>`,
        transfer: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M7.5 21L3 16.5m0 0L7.5 12M3 16.5h18m-7.5-12L21 9m0 0L16.5 12M21 9H3" /></svg>`,
        exchange: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M7.5 21L3 16.5m0 0L7.5 12M3 16.5h18m-7.5-12L21 9m0 0L16.5 12M21 9H3" /></svg>`,
        mining: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12.948 16.63l-4.298 4.298a2.038 2.038 0 0 1 -2.883 -2.883l4.298 -4.298" /><path d="M10.12 13.803l-1.414 -1.414" /><path d="M17.364 3l3.636 3.636l-8.485 8.485l-3.636 -3.636z" /><path d="M14.536 5.828l-1.414 -1.414" /></svg>`,
        history: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`,
        chat: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.72 3.72a.75.75 0 01-1.06 0l-3.72-3.72H6.31c-1.136 0-1.98-.967-1.98-2.193v-4.286c0-.97.616-1.813 1.5-2.097m14.25 0a2.25 2.25 0 00-2.25-2.25H6.31a2.25 2.25 0 00-2.25 2.25m13.5 0V6.75a2.25 2.25 0 00-2.25-2.25H6.31a2.25 2.25 0 00-2.25 2.25v1.761" /></svg>`,
    };
    
    // --- NAVIGATION ---
    const navigate = (view, context = {}) => {
        state.activeView = view;
        state.viewContext = context;
        render();
    };

    // --- RENDER FUNCTIONS ---
    const render = () => {
        // Apply theme
        htmlEl.className = state.theme;

        // Render shell
        renderHeader();
        renderBottomNav();
        renderModals();
        renderToasts();

        // Render current view
        if (!state.isAuthenticated) {
            appView.innerHTML = '';
            state.modals.login = true;
            renderModals();
            return;
        }
        
        switch (state.activeView) {
            case 'dashboard':
                renderDashboard();
                break;
            default:
                renderDashboard();
        }
    };
    
    // --- COMPONENT RENDERERS ---
    const renderHeader = () => {
        const navItems = [
            { view: 'dashboard', label: 'Dashboard', icon: ICONS.dashboard },
            { view: 'market', label: 'Market', icon: ICONS.market },
            { view: 'trade', label: 'Trade', icon: ICONS.trade },
            { view: 'options', label: 'Options', icon: ICONS.options },
            { view: 'ai_assistant', label: 'AI Assistant', icon: ICONS.ai },
        ];
        
        appHeader.innerHTML = `
            <div class="max-w-[1920px] mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex items-center justify-between h-16">
                    <div class="flex items-center space-x-8">
                        <a href="#" class="flex items-center space-x-2 text-sky-500 dark:text-sky-400">
                            ${ICONS.logo}
                            <span class="font-semibold text-lg tracking-tight">SmartAirTrade</span>
                        </a>
                        <nav class="hidden md:flex items-center space-x-4">
                            ${navItems.map(item => `
                                <button data-view="${item.view}" class="nav-item flex items-center space-x-2 px-4 py-2 text-sm font-medium rounded-md transition-colors ${state.activeView === item.view ? 'active' : ''}">
                                    ${item.icon}
                                    <span>${item.label}</span>
                                </button>
                            `).join('')}
                        </nav>
                    </div>
                    <div class="flex items-center space-x-2 sm:space-x-4">
                        <button data-view="settings" class="p-2 rounded-full transition-colors nav-item" aria-label="Settings">${ICONS.settings}</button>
                        <button data-view="profile" class="p-2 rounded-full transition-colors nav-item" aria-label="User Profile">${ICONS.user}</button>
                    </div>
                </div>
            </div>`;
        attachHeaderListeners();
    };
    
    const renderBottomNav = () => {
         const navItems = [
            { view: 'dashboard', label: 'Dashboard', icon: ICONS.dashboard },
            { view: 'market', label: 'Market', icon: ICONS.market },
            { view: 'trade', label: 'Trade', icon: ICONS.trade },
            { view: 'options', label: 'Options', icon: ICONS.options },
            { view: 'ai_assistant', label: 'AI', icon: ICONS.ai },
        ];
        bottomNav.innerHTML = `
             ${navItems.map(item => `
                <button data-view="${item.view}" class="bottom-nav-item flex flex-col items-center justify-center space-y-1 w-full pt-2 pb-1 text-xs font-medium transition-colors ${state.activeView === item.view ? 'active' : ''}">
                    ${item.icon}
                    <span>${item.label}</span>
                </button>
            `).join('')}`;
        attachBottomNavListeners();
    };
    
    const renderDashboard = () => {
        const marketMovers = [...state.pairs]
            .sort((a, b) => Math.abs(b.change24h) - Math.abs(a.change24h))
            .slice(0, 5);
        
        appView.innerHTML = `
            <div class="space-y-8">
                <!-- Portfolio Overview -->
                <div class="card p-6">
                    <div class="flex justify-between items-center mb-4">
                        <p class="text-sm">Total Balance (USD)</p>
                        <button id="toggle-balance-btn" class="p-1 rounded-full" aria-label="Toggle balance visibility">${ICONS.eye}</button>
                    </div>
                    <p id="total-balance" class="text-4xl font-bold tracking-tight mb-8">
                        $${state.totalBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}
                    </p>
                    <div class="grid grid-cols-3 gap-y-6 text-center">
                        <button class="action-btn" data-modal="deposit">${ICONS.deposit}<span>Deposit</span></button>
                        <button class="action-btn" data-view="withdraw">${ICONS.withdraw}<span>Withdraw</span></button>
                        <button class="action-btn" data-modal="transfer">${ICONS.transfer}<span>Transfer</span></button>
                        <button class="action-btn" data-modal="exchange">${ICONS.exchange}<span>Exchange</span></button>
                        <button class="action-btn" data-view="mining">${ICONS.mining}<span>Mining</span></button>
                        <button class="action-btn" data-view="history">${ICONS.history}<span>History</span></button>
                    </div>
                </div>

                <!-- Market Movers -->
                <div class="card p-4 sm:p-6 lg:col-span-3">
                    <h2 class="text-xl font-bold mb-4">Market Movers</h2>
                    <div class="space-y-1">
                         <div class="grid grid-cols-3 sm:grid-cols-4 gap-4 text-xs px-4 pb-2 border-b">
                            <div>Asset</div>
                            <div class="text-right">7d %</div>
                            <div class="text-right">Change (24h)</div>
                            <div class="hidden sm:block text-right">Chart</div>
                        </div>
                        ${marketMovers.map(pair => `
                            <div class="grid grid-cols-3 sm:grid-cols-4 gap-4 items-center py-3 px-4 rounded-lg transition-colors market-mover-row">
                                <div class="flex items-center space-x-3">
                                    <img src="https://picsum.photos/seed/${pair.base}/32" alt="${pair.base}" class="w-8 h-8 rounded-full" />
                                    <div>
                                        <p class="font-semibold text-sm sm:text-base">${pair.base}</p>
                                        <p class="text-xs">${pair.id.split('-')[0].toUpperCase()}</p>
                                    </div>
                                </div>
                                <div class="text-right"><p class="font-mono text-sm ${pair.change7d >= 0 ? 'text-green' : 'text-red'}">${pair.change7d.toFixed(2)}%</p></div>
                                <div class="text-right"><p class="font-mono text-sm ${pair.change24h >= 0 ? 'text-green' : 'text-red'}">${pair.change24h.toFixed(2)}%</p></div>
                                <div class="hidden sm:flex justify-end"></div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
             <button id="open-chat-btn" class="fixed bottom-24 md:bottom-6 right-6 rounded-full p-3 shadow-lg z-40" aria-label="Open live chat">
                ${ICONS.chat}
            </button>`;
        attachDashboardListeners();
    };

    const renderModals = () => {
        if (state.modals.login && !state.isAuthenticated) {
            modalContainer.innerHTML = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="card max-w-md w-full mx-4">
                        <h2 class="text-2xl font-bold mb-4">Login to SmartAirTrade</h2>
                        <p class="mb-4">Welcome back! Please log in to continue.</p>
                        <button id="login-success-btn" class="w-full bg-sky-500 hover:bg-sky-600 text-white py-3 px-4 rounded-lg transition-colors">
                            Log In
                        </button>
                    </div>
                </div>`;
            document.getElementById('login-success-btn').onclick = () => {
                state.isAuthenticated = true;
                state.modals.login = false;
                render();
            };
        } else {
            modalContainer.innerHTML = '';
        }
    };
    
    const renderToasts = () => {
        // Toast rendering implementation
        if (state.toastMessage) {
            toastContainer.innerHTML = `
                <div class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50">
                    ${state.toastMessage}
                </div>`;
            setTimeout(() => {
                state.toastMessage = '';
                renderToasts();
            }, 3000);
        } else {
            toastContainer.innerHTML = '';
        }
    };
    

    // --- EVENT LISTENERS ---
    const attachHeaderListeners = () => {
        appHeader.querySelectorAll('.nav-item').forEach(el => {
            el.addEventListener('click', () => navigate(el.dataset.view));
        });
    };
    
    const attachBottomNavListeners = () => {
        bottomNav.querySelectorAll('.bottom-nav-item').forEach(el => {
            el.addEventListener('click', () => navigate(el.dataset.view));
        });
    };
    
    const attachDashboardListeners = () => {
        appView.querySelectorAll('.action-btn').forEach(el => {
            if (el.dataset.view) {
                 el.addEventListener('click', () => navigate(el.dataset.view));
            } else if (el.dataset.modal) {
                // handle modal opening
                state.toastMessage = `${el.dataset.modal.charAt(0).toUpperCase() + el.dataset.modal.slice(1)} feature coming soon!`;
                renderToasts();
            }
        });
        
        const toggleBalanceBtn = document.getElementById('toggle-balance-btn');
        if (toggleBalanceBtn) {
            toggleBalanceBtn.addEventListener('click', () => {
                const balanceEl = document.getElementById('total-balance');
                if (balanceEl.textContent.includes('*')) {
                    balanceEl.textContent = `$${state.totalBalance.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
                } else {
                    balanceEl.textContent = '$******';
                }
            });
        }

        const chatBtn = document.getElementById('open-chat-btn');
        if (chatBtn) {
            chatBtn.addEventListener('click', () => {
                state.toastMessage = 'Live chat support coming soon!';
                renderToasts();
            });
        }
    };

    // --- DATA & SERVICES ---
    const MOCK_ASSETS = [
        { id: 'bitcoin', name: 'Bitcoin', symbol: 'BTC', amount: 0.75, valueUSD: 94125.56, priceUSD: 125500.75, change24h: 3.15 },
        { id: 'ethereum', name: 'Ethereum', symbol: 'ETH', amount: 10.5, valueUSD: 86214.45, priceUSD: 8210.90, change24h: 5.52 },
        { id: 'tether', name: 'Tether', symbol: 'USDT', amount: 25000.00, valueUSD: 25000.00, priceUSD: 1.00, change24h: 0.01 },
    ];
    
    const generateSparkline = () => Array.from({length: 30}, () => 100 + (Math.random() - 0.5) * 50);

    const MOCK_PAIRS = [
      { id: 'btc-usdt', base: 'Bitcoin', quote: 'USDT', price: 125500.75, change24h: 3.15, change7d: 10.51, volume24h: 42123456789, marketCap: 2450000000000, sparklineData: generateSparkline(), volatility: 0.005 },
      { id: 'eth-usdt', base: 'Ethereum', quote: 'USDT', price: 8210.90, change24h: 5.52, change7d: 12.33, volume24h: 25098765432, marketCap: 985000000000, sparklineData: generateSparkline(), volatility: 0.007 },
      { id: 'sol-usdt', base: 'Solana', quote: 'USDT', price: 450.25, change24h: -2.10, change7d: -8.14, volume24h: 5123456789, marketCap: 210000000000, sparklineData: generateSparkline(), volatility: 0.012 },
      { id: 'bnb-usdt', base: 'BNB', quote: 'USDT', price: 815.00, change24h: 1.75, change7d: 4.20, volume24h: 3012345678, marketCap: 125000000000, sparklineData: generateSparkline(), volatility: 0.009 },
      { id: 'doge-usdt', base: 'Dogecoin', quote: 'USDT', price: 0.45, change24h: 8.21, change7d: 25.43, volume24h: 1543210987, marketCap: 60000000000, sparklineData: generateSparkline(), volatility: 0.025 },
    ];

    const initializeMarketData = () => {
        state.pairs = MOCK_PAIRS;
        state.assets = MOCK_ASSETS;
        state.totalBalance = MOCK_ASSETS.reduce((sum, asset) => sum + asset.valueUSD, 0);

        setInterval(() => {
            state.pairs = state.pairs.map(pair => {
                const change = (Math.random() - 0.5) * pair.volatility;
                const newPrice = pair.price * (1 + change);
                return {
                    ...pair,
                    price: newPrice > 0 ? newPrice : 0,
                    change24h: pair.change24h + (Math.random() - 0.5) * 0.05,
                }
            });
            state.totalBalance = state.assets.reduce((sum, asset) => {
                const pair = state.pairs.find(p => p.base.toUpperCase() === asset.symbol.toUpperCase());
                return sum + (asset.amount * (pair ? pair.price : asset.priceUSD));
            }, 0);
            
            if (state.activeView === 'dashboard') {
                renderDashboard();
            }
        }, 2000);
    };

    // --- INITIALIZATION ---
    const init = () => {
        initializeMarketData();
        render();
    };

    init();
});